// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const retrieveAuthCredentials = `-- name: RetrieveAuthCredentials :one
SELECT key_id, client_id, priv_key_pem FROM axm_names WHERE name = ?
`

type RetrieveAuthCredentialsRow struct {
	KeyID      string
	ClientID   string
	PrivKeyPem []byte
}

func (q *Queries) RetrieveAuthCredentials(ctx context.Context, name string) (RetrieveAuthCredentialsRow, error) {
	row := q.db.QueryRowContext(ctx, retrieveAuthCredentials, name)
	var i RetrieveAuthCredentialsRow
	err := row.Scan(&i.KeyID, &i.ClientID, &i.PrivKeyPem)
	return i, err
}

const retrieveClientAssertion = `-- name: RetrieveClientAssertion :one
SELECT ca_token, ca_validity_sec, ca_expiry_unix, client_id FROM axm_names WHERE name = ? FOR UPDATE
`

type RetrieveClientAssertionRow struct {
	CaToken       sql.NullString
	CaValiditySec sql.NullInt32
	CaExpiryUnix  sql.NullInt32
	ClientID      string
}

func (q *Queries) RetrieveClientAssertion(ctx context.Context, name string) (RetrieveClientAssertionRow, error) {
	row := q.db.QueryRowContext(ctx, retrieveClientAssertion, name)
	var i RetrieveClientAssertionRow
	err := row.Scan(
		&i.CaToken,
		&i.CaValiditySec,
		&i.CaExpiryUnix,
		&i.ClientID,
	)
	return i, err
}

const updateClientAssertion = `-- name: UpdateClientAssertion :exec
UPDATE axm_names SET ca_token = ?, ca_validity_sec = ?, ca_expiry_unix = ? WHERE name = ?
`

type UpdateClientAssertionParams struct {
	CaToken       sql.NullString
	CaValiditySec sql.NullInt32
	CaExpiryUnix  sql.NullInt32
	Name          string
}

func (q *Queries) UpdateClientAssertion(ctx context.Context, arg UpdateClientAssertionParams) error {
	_, err := q.db.ExecContext(ctx, updateClientAssertion,
		arg.CaToken,
		arg.CaValiditySec,
		arg.CaExpiryUnix,
		arg.Name,
	)
	return err
}
